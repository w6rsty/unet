# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'demo.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
from PyQt5.QtCore import Qt, QSize, QUrl
import subprocess  # 确保这行导入位于文件的顶部
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QApplication, QWidget, QHBoxLayout, QVBoxLayout, QSplashScreen

from PyQt5.QtGui import QIcon, QFont, QColor
from PyQt5.QtWidgets import QApplication, QWidget, QHBoxLayout, QVBoxLayout
from qfluentwidgets import *
import sys

from PyQt5 import Qt, QtWidgets
from PyQt5.QtGui import QIcon, QBrush, QPainter, QPen, QPixmap, QColor, QImage, QGuiApplication
from PyQt5.QtWidgets import (
    QFileDialog,
    QApplication,

    QGraphicsScene,
    QGraphicsView,
    QLabel, QDesktopWidget, QAction, QSpacerItem, QSizePolicy, QSlider, QDialog, QLineEdit,
)
import numpy as np
from skimage import io
import time
from PIL import Image
from unet import Unet
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtWidgets import QMainWindow, QSplitter
from PyQt5 import QtCore, QtGui, QtWidgets

initial_image = None
img_2c = None

# TODO: 异步加载模型
# 创建Unet实例，替换为您的模型路径和参数
model_path = 'logs3/best_epoch_weights.pth'
num_classes = 2
unet_instance = Unet(model_path=model_path, num_classes=num_classes, input_shape=[256, 256], cuda=False)

# 创建Unet实例，替换为您的模型路径和参数
model_path = 'logs4/best_epoch_weights.pth'
num_classes = 2
unet_instance1 = Unet(model_path=model_path, num_classes=num_classes, input_shape=[1024, 1024], cuda=False)
 #全局变量，当前展示在两个主Label的jsonId,初始化为1
global jsonId 
jsonId = 1

def np2pixmap(np_img):
    height, width, channel = np_img.shape
    bytesPerLine = 3 * width
    qImg = QImage(np_img.data, width, height, bytesPerLine, QImage.Format_RGB888)
    return QPixmap.fromImage(qImg)

def getJson(file_index):
    with open(f'json/json{file_index}.json', 'r',encoding="utf-8") as f:
        json_data = json.load(f)
        return json_data

class UI_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1589, 639)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(Form.sizePolicy().hasHeightForWidth())
        Form.setSizePolicy(sizePolicy)
        super().__init__()

        
        self.circle1 = None
        self.click_point = None
        self.radius = None
        self.end_pos = None
        self.circle = None
        global initial_image
        self.DrawingLabel = DrawingLabel(Form)
        self.DrawingLabel.setObjectName("DrawingLabel")


        # configs
        self.last_click_pos = None
        self.half_point_size = 5
        self.line_width = 3
        # app stats
        self.image_path = None
        self.color_idx = 0
        self.bg_img = None
        self.is_mouse_down = False
        self.rect = None
        self.point_size = self.half_point_size * 2
        self.start_point = None
        self.end_point = None
        self.start_pos = (None, None)
        self.mask_c = np.zeros((1024, 1024, 3), dtype="uint8")
        self.coordinate_history = []
        self.history = []  # 历史记录
        self.mode = "draw"  # 当前模式，默认为绘制模式
        self.restore_region_history = {}  # 恢复区域的历史记录
        self.initial_image = None  # 记录最初图片的样子
        self.view1 = QGraphicsView()
        self.view2 = QGraphicsView()
        self.img_3c_view1 = None
        self.img_3c_view2 = None
        self.mode = "draw"  # 当前模式，默认为绘制模式


        
        Form.setStyleSheet("QLabel\n"
"{\n"
"background-color: rgb(221, 221, 221);\n"
"\n"
"}\n"
"")

        self.verticalLayout = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.ToolButton_2 = QtWidgets.QToolButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ToolButton_2.sizePolicy().hasHeightForWidth())
        self.ToolButton_2.setSizePolicy(sizePolicy)
        self.ToolButton_2.setStyleSheet("font: 15pt \"Microsoft YaHei UI\";")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("加载图片.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ToolButton_2.setIcon(icon)
        self.ToolButton_2.setIconSize(QtCore.QSize(35, 35))
        self.ToolButton_2.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.ToolButton_2.setAutoRaise(True)
        self.ToolButton_2.setObjectName("ToolButton_2")
        self.horizontalLayout_3.addWidget(self.ToolButton_2)
        self.ToolButton_10 = QtWidgets.QToolButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ToolButton_10.sizePolicy().hasHeightForWidth())
        self.ToolButton_10.setSizePolicy(sizePolicy)
        self.ToolButton_10.setStyleSheet("font: 15pt \"Microsoft YaHei UI\";")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("读取历史.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ToolButton_10.setIcon(icon1)
        self.ToolButton_10.setIconSize(QtCore.QSize(35, 35))
        self.ToolButton_10.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.ToolButton_10.setAutoRaise(True)
        self.ToolButton_10.setObjectName("ToolButton_10")
        self.horizontalLayout_3.addWidget(self.ToolButton_10)
        self.ToolButton_11 = QtWidgets.QToolButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ToolButton_11.sizePolicy().hasHeightForWidth())
        self.ToolButton_11.setSizePolicy(sizePolicy)
        self.ToolButton_11.setStyleSheet("font: 15pt \"Microsoft YaHei UI\";")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("大图识别.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ToolButton_11.setIcon(icon2)
        self.ToolButton_11.setIconSize(QtCore.QSize(35, 35))
        self.ToolButton_11.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.ToolButton_11.setAutoRaise(True)
        self.ToolButton_11.setObjectName("ToolButton_11")
        self.horizontalLayout_3.addWidget(self.ToolButton_11)
        self.ToolButton_13 = QtWidgets.QToolButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ToolButton_13.sizePolicy().hasHeightForWidth())
        self.ToolButton_13.setSizePolicy(sizePolicy)
        self.ToolButton_13.setStyleSheet("font: 15pt \"Microsoft YaHei UI\";")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("矩形增加.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ToolButton_13.setIcon(icon3)
        self.ToolButton_13.setIconSize(QtCore.QSize(35, 35))
        self.ToolButton_13.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.ToolButton_13.setAutoRaise(True)
        self.ToolButton_13.setObjectName("ToolButton_13")
        self.horizontalLayout_3.addWidget(self.ToolButton_13)
        self.ToolButton_12 = QtWidgets.QToolButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ToolButton_12.sizePolicy().hasHeightForWidth())
        self.ToolButton_12.setSizePolicy(sizePolicy)
        self.ToolButton_12.setStyleSheet("font: 15pt \"Microsoft YaHei UI\";")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("手动添加.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ToolButton_12.setIcon(icon4)
        self.ToolButton_12.setIconSize(QtCore.QSize(35, 35))
        self.ToolButton_12.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.ToolButton_12.setAutoRaise(True)
        self.ToolButton_12.setObjectName("ToolButton_12")
        self.horizontalLayout_3.addWidget(self.ToolButton_12)
        self.ToolButton_14 = QtWidgets.QToolButton(Form)
        self.ToolButton_14.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ToolButton_14.sizePolicy().hasHeightForWidth())
        self.ToolButton_14.setSizePolicy(sizePolicy)
        self.ToolButton_14.setStyleSheet("font: 15pt \"Microsoft YaHei UI\";")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("矩形删除.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ToolButton_14.setIcon(icon5)
        self.ToolButton_14.setIconSize(QtCore.QSize(35, 35))
        self.ToolButton_14.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.ToolButton_14.setAutoRaise(True)
        self.ToolButton_14.setObjectName("ToolButton_14")
        self.horizontalLayout_3.addWidget(self.ToolButton_14)
        self.ToolButton_15 = QtWidgets.QToolButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ToolButton_15.sizePolicy().hasHeightForWidth())
        self.ToolButton_15.setSizePolicy(sizePolicy)
        self.ToolButton_15.setStyleSheet("font: 15pt \"Microsoft YaHei UI\";")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("手动删除.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ToolButton_15.setIcon(icon6)
        self.ToolButton_15.setIconSize(QtCore.QSize(35, 35))
        self.ToolButton_15.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.ToolButton_15.setAutoRaise(True)
        self.ToolButton_15.setObjectName("ToolButton_15")
        self.horizontalLayout_3.addWidget(self.ToolButton_15)
        self.ToolButton = QtWidgets.QToolButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ToolButton.sizePolicy().hasHeightForWidth())
        self.ToolButton.setSizePolicy(sizePolicy)
        self.ToolButton.setStyleSheet("font: 15pt \"Microsoft YaHei UI\";")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("区域生长.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ToolButton.setIcon(icon7)
        self.ToolButton.setIconSize(QtCore.QSize(35, 35))
        self.ToolButton.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.ToolButton.setAutoRaise(True)
        self.ToolButton.setObjectName("ToolButton")
        self.horizontalLayout_3.addWidget(self.ToolButton)
        self.toolButton_2 = QtWidgets.QToolButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButton_2.sizePolicy().hasHeightForWidth())
        self.toolButton_2.setSizePolicy(sizePolicy)
        self.toolButton_2.setStyleSheet("font: 15pt \"Microsoft YaHei UI\";")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("眼底分区.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton_2.setIcon(icon8)
        self.toolButton_2.setIconSize(QtCore.QSize(35, 35))
        self.toolButton_2.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_2.setAutoRaise(True)
        self.toolButton_2.setObjectName("toolButton_2")
        self.horizontalLayout_3.addWidget(self.toolButton_2)
        self.toolButton_3 = QtWidgets.QToolButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButton_3.sizePolicy().hasHeightForWidth())
        self.toolButton_3.setSizePolicy(sizePolicy)
        self.toolButton_3.setStyleSheet("font: 15pt \"Microsoft YaHei UI\";")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("矩形分区.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton_3.setIcon(icon9)
        self.toolButton_3.setIconSize(QtCore.QSize(35, 35))
        self.toolButton_3.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_3.setAutoRaise(True)
        self.toolButton_3.setObjectName("toolButton_3")
        self.horizontalLayout_3.addWidget(self.toolButton_3)
        self.ToolButton_6 = QtWidgets.QToolButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ToolButton_6.sizePolicy().hasHeightForWidth())
        self.ToolButton_6.setSizePolicy(sizePolicy)
        self.ToolButton_6.setStyleSheet("font: 15pt \"Microsoft YaHei UI\";")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("撤销操作.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ToolButton_6.setIcon(icon10)
        self.ToolButton_6.setIconSize(QtCore.QSize(35, 35))
        self.ToolButton_6.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.ToolButton_6.setAutoRaise(True)
        self.ToolButton_6.setObjectName("ToolButton_6")
        self.horizontalLayout_3.addWidget(self.ToolButton_6)
        self.ToolButton_5 = QtWidgets.QToolButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ToolButton_5.sizePolicy().hasHeightForWidth())
        self.ToolButton_5.setSizePolicy(sizePolicy)
        self.ToolButton_5.setStyleSheet("font: 15pt \"Microsoft YaHei UI\";")
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("数据保存.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ToolButton_5.setIcon(icon11)
        self.ToolButton_5.setIconSize(QtCore.QSize(35, 35))
        self.ToolButton_5.setShortcut("")
        self.ToolButton_5.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.ToolButton_5.setAutoRaise(True)
        self.ToolButton_5.setObjectName("ToolButton_5")
        self.horizontalLayout_3.addWidget(self.ToolButton_5)
        self.toolButton_4 = QtWidgets.QToolButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButton_4.sizePolicy().hasHeightForWidth())
        self.toolButton_4.setSizePolicy(sizePolicy)
        self.toolButton_4.setStyleSheet("font: 15pt \"Microsoft YaHei UI\";")
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("掩模保存.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton_4.setIcon(icon12)
        self.toolButton_4.setIconSize(QtCore.QSize(35, 35))
        self.toolButton_4.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_4.setAutoRaise(True)
        self.toolButton_4.setObjectName("toolButton_4")
        self.horizontalLayout_3.addWidget(self.toolButton_4)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.line_5 = QtWidgets.QFrame(Form)
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.verticalLayout.addWidget(self.line_5)
        self.frame = QtWidgets.QFrame(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(5)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(2, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.SimpleCardWidget = SimpleCardWidget(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(5)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SimpleCardWidget.sizePolicy().hasHeightForWidth())
        self.SimpleCardWidget.setSizePolicy(sizePolicy)
        self.SimpleCardWidget.setObjectName("SimpleCardWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.SimpleCardWidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.BodyLabel_2 = DrawingLabel(Form)
        self.BodyLabel_2.setText("")
        self.BodyLabel_2.setObjectName("BodyLabel_2")
        self.verticalLayout_2.addWidget(self.BodyLabel_2)
        self.horizontalLayout.addWidget(self.SimpleCardWidget)
        spacerItem1 = QtWidgets.QSpacerItem(2, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.SimpleCardWidget_2 = SimpleCardWidget(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(5)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SimpleCardWidget_2.sizePolicy().hasHeightForWidth())
        self.SimpleCardWidget_2.setSizePolicy(sizePolicy)
        self.SimpleCardWidget_2.setStyleSheet("QLabel\n"
"{\n"
"background-color: rgb(220, 220, 220);\n"
"\n"
"}\n"
"")
        self.SimpleCardWidget_2.setObjectName("SimpleCardWidget_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.SimpleCardWidget_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.BodyLabel = BodyLabel(self.SimpleCardWidget_2)
        self.BodyLabel.setText("")
        self.BodyLabel.setObjectName("BodyLabel")
        self.verticalLayout_3.addWidget(self.BodyLabel)
        self.horizontalLayout.addWidget(self.SimpleCardWidget_2)
        spacerItem2 = QtWidgets.QSpacerItem(2, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.verticalLayout.addWidget(self.frame)
        self.SimpleCardWidget_3 = SimpleCardWidget(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(3)
        sizePolicy.setHeightForWidth(self.SimpleCardWidget_3.sizePolicy().hasHeightForWidth())
        self.SimpleCardWidget_3.setSizePolicy(sizePolicy)
        self.SimpleCardWidget_3.setObjectName("SimpleCardWidget_3")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.SimpleCardWidget_3)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.horizontalFrame = QtWidgets.QFrame(self.SimpleCardWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalFrame.sizePolicy().hasHeightForWidth())
        self.horizontalFrame.setSizePolicy(sizePolicy)
        self.horizontalFrame.setObjectName("horizontalFrame")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.horizontalFrame)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.gridFrame = QtWidgets.QFrame(self.horizontalFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gridFrame.sizePolicy().hasHeightForWidth())
        self.gridFrame.setSizePolicy(sizePolicy)
        self.gridFrame.setObjectName("gridFrame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridFrame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        
        #zjy优化，展示图像并添加相应槽函数
        
        self.BodyLabel_6 = BodyLabel(self.gridFrame)
        json1 = getJson(1)
        self.BodyLabel_6.setPixmap(QtGui.QPixmap(json1['imgPath']).scaled(200,180,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))        
        self.BodyLabel_6.setGeometry(QtCore.QRect(0, 0, 100, 100))
        self.BodyLabel_6.setObjectName("BodyLabel_6")
        self.gridLayout_2.addWidget(self.BodyLabel_6, 0, 1, 1, 1)
        self.BodyLabel_7 = BodyLabel(self.gridFrame)
        json2 = getJson(2)
        self.BodyLabel_7.setPixmap(QtGui.QPixmap(json2['imgPath']).scaled(200,180,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        self.BodyLabel_7.setObjectName("BodyLabel_7")
        self.gridLayout_2.addWidget(self.BodyLabel_7, 1, 1, 1, 1)
        self.BodyLabel_3 = BodyLabel(self.gridFrame)
        json3 = getJson(3)
        self.BodyLabel_3.setPixmap(QtGui.QPixmap(json3['imgPath']).scaled(200,180,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        self.BodyLabel_3.setObjectName("BodyLabel_3")
        self.gridLayout_2.addWidget(self.BodyLabel_3, 1, 0, 1, 1)
        self.BodyLabel_5 = BodyLabel(self.gridFrame)
        json4 = getJson(4)
        self.BodyLabel_5.setPixmap(QtGui.QPixmap(json4['imgPath']).scaled(200,180,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        self.BodyLabel_5.setObjectName("BodyLabel_5")
        self.gridLayout_2.addWidget(self.BodyLabel_5, 0, 0, 1, 1)
        self.BodyLabel_4 = BodyLabel(self.gridFrame)
        json5 = getJson(5)
        self.BodyLabel_4.setPixmap(QtGui.QPixmap(json5['imgPath']).scaled(200,180,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        self.BodyLabel_4.setObjectName("BodyLabel_4")
        self.gridLayout_2.addWidget(self.BodyLabel_4, 0, 2, 1, 1)
        self.verticalFrame = QtWidgets.QFrame(self.gridFrame)
        self.verticalFrame.setObjectName("verticalFrame")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.verticalFrame)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.toolButton = QtWidgets.QToolButton(self.verticalFrame)
        self.toolButton.setStyleSheet("font: 15pt \"Microsoft YaHei UI\";")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("加号.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton.setIcon(icon13)
        self.toolButton.setIconSize(QtCore.QSize(40, 40))
        self.toolButton.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton.setAutoRaise(True)
        self.toolButton.setObjectName("toolButton")
        self.verticalLayout_6.addWidget(self.toolButton, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.gridLayout_2.addWidget(self.verticalFrame, 1, 2, 1, 1)
        self.horizontalLayout_6.addWidget(self.gridFrame)
        self.verticalFrame1 = QtWidgets.QFrame(self.horizontalFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.verticalFrame1.sizePolicy().hasHeightForWidth())
        self.verticalFrame1.setSizePolicy(sizePolicy)
        self.verticalFrame1.setObjectName("verticalFrame1")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.verticalFrame1)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.BodyLabel_11 = BodyLabel(self.verticalFrame1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.BodyLabel_11.sizePolicy().hasHeightForWidth())
        self.BodyLabel_11.setSizePolicy(sizePolicy)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.BodyLabel_11.setPalette(palette)
        self.BodyLabel_11.setStyleSheet("\n"
"QLabel\n"
"{\n"
"    font: 15pt \"Microsoft YaHei UI\";\n"
"border-radius: 50px;\n"
"border: 2px solid grey;\n"
"background-color: rgb(62, 144, 162);\n"
"\n"
"}")
        self.BodyLabel_11.setAlignment(QtCore.Qt.AlignCenter)
        self.BodyLabel_11.setObjectName("BodyLabel_11")
        self.verticalLayout_8.addWidget(self.BodyLabel_11)
        self.BodyLabel_10 = BodyLabel(self.verticalFrame1)
        self.BodyLabel_10.setText("")
        self.BodyLabel_10.setObjectName("BodyLabel_10")
        self.verticalLayout_8.addWidget(self.BodyLabel_10)
        self.horizontalLayout_6.addWidget(self.verticalFrame1)
        self.verticalFrame2 = QtWidgets.QFrame(self.horizontalFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.verticalFrame2.sizePolicy().hasHeightForWidth())
        self.verticalFrame2.setSizePolicy(sizePolicy)
        self.verticalFrame2.setObjectName("verticalFrame2")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.verticalFrame2)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.BodyLabel_9 = BodyLabel(self.verticalFrame2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.BodyLabel_9.sizePolicy().hasHeightForWidth())
        self.BodyLabel_9.setSizePolicy(sizePolicy)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 144, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.BodyLabel_9.setPalette(palette)
        self.BodyLabel_9.setStyleSheet("\n"
"QLabel\n"
"{\n"
"    font: 15pt \"Microsoft YaHei UI\";\n"
"border-radius: 50px;\n"
"border: 2px solid grey;\n"
"background-color: rgb(62, 144, 162);\n"
"\n"
"}")
        self.BodyLabel_9.setAlignment(QtCore.Qt.AlignCenter)
        self.BodyLabel_9.setObjectName("BodyLabel_9")
        self.verticalLayout_7.addWidget(self.BodyLabel_9)
        self.TextEdit = TextEdit(self.verticalFrame2)
        self.TextEdit.setObjectName("TextEdit")
        self.verticalLayout_7.addWidget(self.TextEdit)
        self.PrimaryPushButton = PrimaryPushButton(self.verticalFrame2)
        self.PrimaryPushButton.setObjectName("PrimaryPushButton")
        self.verticalLayout_7.addWidget(self.PrimaryPushButton)
        self.horizontalLayout_6.addWidget(self.verticalFrame2)
        self.horizontalLayout_7.addWidget(self.horizontalFrame)
        self.verticalLayout.addWidget(self.SimpleCardWidget_3)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        
        # zjy优化
        self.ToolButton_2.clicked.connect(self.openImage) #选择图片功能
        self.ToolButton_11.clicked.connect(self.draw)
        
        # self.toolButton.clicked.connect(self.addImage) #为添加影像增加槽函数

        self.toolButton.mousePressEvent = self.addImage
        self.BodyLabel_6.mousePressEvent = self.showPatientInfo1
        self.BodyLabel_7.mousePressEvent = self.showPatientInfo2
        self.BodyLabel_3.mousePressEvent = self.showPatientInfo3
        self.BodyLabel_5.mousePressEvent = self.showPatientInfo4
        self.BodyLabel_4.mousePressEvent = self.showPatientInfo5
        
    #这个函数在点击图片后触发   
    def showPatientInfo1(self,event):
        # 修改全局变量
        jsonId = 1
        jsonData = getJson(jsonId)
        self.BodyLabel.setScaledContents(True)
        self.BodyLabel.setPixmap(QtGui.QPixmap(jsonData['imgPath']).scaled(900,500,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        self.BodyLabel_2.setScaledContents(True)
        self.BodyLabel_2.setPixmap(QtGui.QPixmap(jsonData['imgPath']).scaled(900,500,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        #用户信息对应的框是10 
        listpatientInfo = "\n".join(jsonData['patientInfo'])      
        self.BodyLabel_10.setText(listpatientInfo)
        #分析结果对应的框为TextEdit
        listAnalysisResult = "\n".join(jsonData['AnalysisResult'])  
        self.TextEdit.setText(listAnalysisResult)
        
        
    def showPatientInfo2(self,event):
        # 修改全局变量
        jsonId = 2
        jsonData = getJson(jsonId)
        self.BodyLabel.setScaledContents(True)
        self.BodyLabel.setPixmap(QtGui.QPixmap(jsonData['imgPath']).scaled(900,500,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        self.BodyLabel_2.setScaledContents(True)
        self.BodyLabel_2.setPixmap(QtGui.QPixmap(jsonData['imgPath']).scaled(900,500,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))       
        #用户信息对应的框是10 
        listpatientInfo = "\n".join(jsonData['patientInfo'])      
        self.BodyLabel_10.setText(listpatientInfo)
        #分析结果对应的框为TextEdit
        listAnalysisResult = "\n".join(jsonData['AnalysisResult'])  
        self.TextEdit.setText(listAnalysisResult)
        
    def showPatientInfo3(self,event):
        # 修改全局变量
        jsonId = 3
        jsonData = getJson(jsonId)
        self.BodyLabel.setScaledContents(True)
        self.BodyLabel.setPixmap(QtGui.QPixmap(jsonData['imgPath']).scaled(900,500,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        self.BodyLabel_2.setScaledContents(True)
        self.BodyLabel_2.setPixmap(QtGui.QPixmap(jsonData['imgPath']).scaled(900,500,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))       
        #用户信息对应的框是10 
        listpatientInfo = "\n".join(jsonData['patientInfo'])      
        self.BodyLabel_10.setText(listpatientInfo)
        #分析结果对应的框为TextEdit
        listAnalysisResult = "\n".join(jsonData['AnalysisResult'])  
        self.TextEdit.setText(listAnalysisResult)   
        
    def showPatientInfo4(self,event):
        # 修改全局变量
        jsonId = 4
        jsonData = getJson(jsonId)
        self.BodyLabel.setScaledContents(True)
        self.BodyLabel.setPixmap(QtGui.QPixmap(jsonData['imgPath']).scaled(900,500,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        self.BodyLabel_2.setScaledContents(True)
        self.BodyLabel_2.setPixmap(QtGui.QPixmap(jsonData['imgPath']).scaled(900,500,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))       
        #用户信息对应的框是10 
        listpatientInfo = "\n".join(jsonData['patientInfo'])      
        self.BodyLabel_10.setText(listpatientInfo)
        #分析结果对应的框为TextEdit
        listAnalysisResult = "\n".join(jsonData['AnalysisResult'])  
        self.TextEdit.setText(listAnalysisResult)
        
    def showPatientInfo5(self,event):
        # 修改全局变量
        jsonId = 5
        jsonData = getJson(jsonId)
        self.BodyLabel.setScaledContents(True)
        self.BodyLabel.setPixmap(QtGui.QPixmap(jsonData['imgPath']).scaled(900,500,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        self.BodyLabel_2.setScaledContents(True)
        self.BodyLabel_2.setPixmap(QtGui.QPixmap(jsonData['imgPath']).scaled(900,500,QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))       
        #用户信息对应的框是10 
        listpatientInfo = "\n".join(jsonData['patientInfo'])      
        self.BodyLabel_10.setText(listpatientInfo)
        #分析结果对应的框为TextEdit
        listAnalysisResult = "\n".join(jsonData['AnalysisResult'])  
        self.TextEdit.setText(listAnalysisResult)    
        
    def loadImage(self, filePath):
        global initial_image
        img_np = io.imread(filePath)
        if len(img_np.shape) == 2:
            img_3c = np.repeat(img_np[:, :, None], 3, axis=-1)
        else:
            img_3c = img_np

        initial_image = np.copy(img_3c)  # 使用全局变量
        # print(initial_image)
        self.img_3c=initial_image
        self.DrawingLabel.set_initial_image(initial_image)  # 传递图像
        global img_2c
        img_2c=initial_image
        # 设置其他 QLabel 的 pixmap 等
        pixmap = QtGui.QPixmap(filePath)
        self.BodyLabel_2.setPixmap(pixmap.scaled(self.BodyLabel_2.size(), QtCore.Qt.KeepAspectRatioByExpanding, QtCore.Qt.SmoothTransformation))
        self.BodyLabel.setPixmap(pixmap.scaled(self.BodyLabel.size(), QtCore.Qt.KeepAspectRatioByExpanding, QtCore.Qt.SmoothTransformation))
   
    def set_image(self, img_3c):
        # 设置图像，并调整 QLabel 的大小以适应图像
        global img_2c
        q_img = QImage(img_3c.data, img_3c.shape[1], img_3c.shape[0], img_3c.strides[0], QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(q_img)
        self.DrawingLabel.setPixmap(pixmap)  # 假设imageLabel是你的QLabel实例
        self.initial_image = img_3c.copy()  # 确保这里已经给 initial_image 赋值
        img_2c=self.initial_image
        print(img_2c)

    def openImage(self):
        filePath, _ = QtWidgets.QFileDialog.getOpenFileName(
            None, 
            "选择图片", 
            "", 
            "Image Files (*.png *.jpg *.jpeg *.bmp)"
        )
        if filePath:
            
            self.loadImage(filePath)
    def draw(self):
        pass
    
    
    #添加影响，只修改当前展示的图片
    def addImage(self):
        filePath, _ = QtWidgets.QFileDialog.getOpenFileName(
            None, 
            "选择图片", 
            "", 
            "Image Files (*.png *.jpg *.jpeg *.bmp)"
        )
        if filePath:
            jsonData = getJson(jsonId)
            jsonData['imgPath'] = filePath 
             # 将修改后的数据保存回文件
            with open(f'json/json{jsonId}.json', 'w', encoding='utf-8') as f:
                json.dump(jsonData, f, ensure_ascii=False, indent=4)
            self.loadImage(filePath)       

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "中国矿业大学-徐州市第一人民医院无灌注区智能识别软件（大模型识别模式）"))
        self.ToolButton_2.setText(_translate("Form", "加载图片"))
        self.ToolButton_10.setText(_translate("Form", "读取历史"))
        self.ToolButton_11.setText(_translate("Form", "大图识别"))
        self.ToolButton_13.setText(_translate("Form", "矩形增加"))
        self.ToolButton_12.setText(_translate("Form", "手动添加"))
        self.ToolButton_14.setText(_translate("Form", "矩形删除"))
        self.ToolButton_15.setText(_translate("Form", "手动删除"))
        self.ToolButton.setText(_translate("Form", "区域生长"))
        self.toolButton_2.setText(_translate("Form", "眼底分区"))
        self.toolButton_3.setText(_translate("Form", "矩形占比"))
        self.ToolButton_6.setText(_translate("Form", "撤销操作"))
        self.ToolButton_5.setText(_translate("Form", "数据保存"))
        self.toolButton_4.setText(_translate("Form", "掩模保存"))
        self.toolButton.setText(_translate("Form", "添加影像"))
        self.BodyLabel_11.setText(_translate("Form", "用户信息"))
        self.BodyLabel_9.setText(_translate("Form", "分析结果"))
        self.PrimaryPushButton.setText(_translate("Form", "生成报告"))
from qfluentwidgets import BodyLabel, PrimaryPushButton, SimpleCardWidget, TextEdit


from PyQt5.QtWidgets import QLabel
from PyQt5.QtGui import QPainter, QPen, QColor
from PyQt5.QtCore import Qt

from PyQt5.QtWidgets import QLabel
from PyQt5.QtGui import QPainter, QPen, QColor
from PyQt5.QtCore import Qt
import numpy as np
from PIL import Image

import numpy as np
from PyQt5.QtWidgets import QLabel, QFileDialog
from PyQt5.QtGui import QImage, QPixmap, QPainter, QPen, QColor
from skimage import io

class DrawingLabel(QLabel):
    def __init__(self, loader, parent=None,):
        super(DrawingLabel, self).__init__(parent)
        global img_2c
        self.is_mouse_down = True
        self.img_3c = img_2c
        self.initial_image = None
        self.start_pos = None
        self.last_pos = None
        self.mode = "draw"
        self.scene = None
        self.half_point_size = 5
        self.point_size = 10
        self.scene = QGraphicsScene(self)
        self.coordinate_history = []
        self.history = []
        self.line_width = 5
        self.color_idx = 0
        self.tag = 0
        self.rect = None
        self.initial_image = None
        self.mask_c = np.zeros((100, 100, 3), dtype=np.uint8)

        # a reference to the loader
        self.loader = loader

        colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255)]  # 这里定义了三种颜色：红色、绿色和蓝色


    def load_image(self):
            file_path, _ = QFileDialog.getOpenFileName(
                self, "选择图片", ".", "Image Files (*.png *.jpg *.bmp)"
            )

            if not file_path:
                print("未指定图像路径，请选择一个图像")
                return

            img_np = io.imread(file_path)
            if len(img_np.shape) == 2:
                img_3c = np.repeat(img_np[:, :, None], 3, axis=-1)
            else:
                img_3c = img_np

            self.set_image(img_3c)
            self.initial_image = np.copy(img_3c)  # 将self.initial_image赋值为加载的图像
    def set_image(self, img_3c):
        q_img = QImage(img_3c.data, img_3c.shape[1], img_3c.shape[0], QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(q_img)
        self.setPixmap(pixmap)
        
    def set_initial_image(self, image):
            # 这里可以直接使用 global initial_image
            global initial_image
            initial_image = image
            self.set_image(initial_image)

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.is_mouse_down = True
            x, y = event.pos().x(), event.pos().y()  # 使用 event.pos() 获取鼠标位置
            self.start_pos = (x, y)

        try:
            if self.mode == "draw":
                # 处理绘制逻辑
                self.is_mouse_down = True
                self.start_pos = event.pos()  # 使用 event.pos() 获取鼠标位置
                self.start_point = self.scene.addEllipse(
                    x - self.half_point_size,
                    y - self.half_point_size,
                    self.point_size,
                    self.point_size,
                    pen=QPen(QColor("red")),
                    brush=QBrush(QColor("red")),
                )
                self.coordinate_history.append((x, y))
                self.history.append(np.copy(self.img_3c))
                self.last_click_pos = (x, y)
            elif self.mode == "difference":
                # 处理差异模式逻辑
                self.is_mouse_down = True
                self.start_pos = event.pos()  # 使用 event.pos() 获取鼠标位置
                self.start_point = self.scene.addEllipse(
                    x - self.half_point_size,
                    y - self.half_point_size,
                    self.point_size,
                    self.point_size,
                    pen=QPen(QColor("yellow")),
                    brush=QBrush(QColor("yellow")),
                )
                self.coordinate_history.append((x, y))
                self.history.append(np.copy(self.img_3c))
            elif self.mode == "restore":
                # 处理恢复模式逻辑
                self.is_mouse_down = True
                self.start_pos = event.pos()  # 使用 event.pos() 获取鼠标位置
                self.start_point = self.scene.addEllipse(
                    x - self.half_point_size,
                    y - self.half_point_size,
                    self.point_size,
                    self.point_size,
                    pen=QPen(QColor("green")),
                    brush=QBrush(QColor("green")),
                )
                self.restore_state = np.copy(self.img_3c)
            elif self.mode == "describe":
                # 处理描述模式逻辑
                self.is_mouse_down = True
                self.drawing = True
                self.points = [event.pos()]
                self.tag = 0
                self.history.append(np.copy(self.img_3c))
            elif self.mode == "delete":
                # 处理删除模式逻辑
                self.is_mouse_down = True
                self.deleteing = True
                self.points = [event.pos()]
                self.tag = 0
                self.history.append(np.copy(self.img_3c))
        except Exception as e:
            print(f"An error occurred: {str(e)}")

    def mouseMoveEvent(self, event):
        if self.is_mouse_down:
            self.current_pos = event.pos()
            if self.mode in ["describe", "delete"]:
                self.points.append(event.pos())
            self.update()
    def mouseReleaseEvent(self, event):
        colors = [
    (255, 0, 0),
    (0, 255, 0),
    (0, 0, 255),
    (255, 255, 0),
    (128, 0, 0),
    (0, 128, 0),
    (0, 0, 128),
    (128, 128, 0),
    (128, 0, 128),
    (0, 128, 128),
    (255, 255, 255),
    (192, 192, 192),
    (64, 64, 64),
    (0, 0, 127),
    (192, 0, 192),
]
        if event.button() == Qt.LeftButton:
            self.is_mouse_down = False
            global img_2c
            # print("img2c",img_2c)
            if self.mode == "draw":
                self.img_3c=img_2c
                img_3c=self.img_3c
                color = colors[self.color_idx]
                x = int(min(self.start_pos.x(), event.pos().x()))
                y = int(min(self.start_pos.y(), event.pos().y()))
                width = int(abs(self.start_pos.x() - event.pos().x()))
                height = int(abs(self.start_pos.y() - event.pos().y()))

                self.mask_c[y: y + height, x: x + width] = color
                self.color_idx = (self.color_idx + 1) % len(colors)

                xmin = int(min(self.start_pos.x(), event.pos().x()))
                xmax = int(max(self.start_pos.x(), event.pos().x()))
                ymin = int(min(self.start_pos.y(), event.pos().y()))
                ymax = int(max(self.start_pos.y(), event.pos().y()))

                region_to_render_white = initial_image[ymin:ymax, xmin:xmax]
                # print(initial_image)
                # if region_to_render_white.shape[0] > 600  and region_to_render_white.shape[1] > 600:
                image = Image.fromarray(initial_image)
                image.save('output_image.png')
                # TODO: Detect the image here
                # segmented_image = unet_instance1.detect_image(image)
                segmented_image = unet_instance.detect_image(image)
                image_array = np.array(segmented_image)
                # print(image_array)
                img_3c = image_array
                self.img_3c=img_3c.copy()
                # print(self.img_3c[ymin:ymax, xmin:xmax])
                # elif region_to_render_white.shape[0] < 1  and region_to_render_white.shape[1] <1:
                #     return
                # else:
                #     image = Image.fromarray(region_to_render_white)
                #     segmented_image = unet_instance.detect_image(image)
                #     image_array = np.array(segmented_image)
                #     self.img_3c[ymin:ymax, xmin:xmax] = image_array
                self.update_image()

            elif self.mode == "difference":
                xmin = int(min(self.start_pos.x(), event.pos().x()))
                xmax = int(max(self.start_pos.x(), event.pos().x()))
                ymin = int(min(self.start_pos.y(), event.pos().y()))
                ymax = int(max(self.start_pos.y(), event.pos().y()))
                self.show_difference_percentage(xmin, xmax, ymin, ymax)

            elif self.mode == "restore":
                xmin = int(min(self.start_pos.x(), event.pos().x()))
                xmax = int(max(self.start_pos.x(), event.pos().x()))
                ymin = int(min(self.start_pos.y(), event.pos().y()))
                ymax = int(max(self.start_pos.y(), event.pos().y()))

                region_to_restore = self.initial_image[ymin:ymax, xmin:xmax]
                self.img_3c[ymin:ymax, xmin:xmax] = region_to_restore
                self.update_image()

            elif self.mode == "describe" and self.drawing:
                try:
                    self.drawing = False
                    self.tag = 0
                    if len(self.points) >= 3:
                        start_point = self.points[0]
                        end_point = self.points[-1]

                    self.drawEdge(start_point, end_point)
                    self.fillMask()
                    self.applyMask()
                    # self.update_image()
                except Exception as e:
                    print(e)

            elif self.mode == "delete" and self.deleteing:
                try:
                    self.deleteing = False
                    self.tag = 0
                    if len(self.points) >= 3:
                        start_point = self.points[0]
                        end_point = self.points[-1]

                    self.drawEdge(start_point, end_point)
                    self.deleteMask()
                except Exception as e:
                    print(e)
            

    def paintEvent(self, event):
        super().paintEvent(event)
        painter = QPainter(self)
        if self.start_pos and hasattr(self, 'current_pos'):
            # Use QPoint methods to get coordinates
            spx, spy = self.start_pos.x(), self.start_pos.y()
            cpx, cpy = self.current_pos.x(), self.current_pos.y()

            rect_color = QColor("red")
            if self.mode == "difference":
                rect_color = QColor("yellow")
            elif self.mode == "restore":
                rect_color = QColor("green")

            painter.setPen(QPen(rect_color, 3))
            painter.drawRect(spx, spy, cpx - spx, cpy - spy)
            
    def update_image(self):
        if hasattr(self, 'img_3c'):  # 检查是否存在 img_3c 属性
            # 将 numpy 数组（self.img_3c）转换为 QImage 对象
            height, width, channels = self.img_3c.shape
            bytes_per_line = channels * width
            image = QImage(self.img_3c.data, width, height, bytes_per_line, QImage.Format_RGB888)

            # 将 QImage 转换为 QPixmap 用于在 GUI 中显示
            pixmap = QPixmap.fromImage(image)

            # 根据 DrawingLabel 的当前尺寸调整 QPixmap 的大小，以填充整个 Label
            scaled_pixmap = pixmap.scaled(self.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation)

            # 设置调整大小后的 QPixmap 到当前的 QLabel（DrawingLabel）
            self.setPixmap(scaled_pixmap)

            # 更新 GUI 以反映更改
            self.update()


def center_splash(splash):
    screen = QApplication.desktop().screenGeometry()
    splash_geometry = splash.geometry()
    splash.move((screen.width() - splash_geometry.width()) // 2, (screen.height() - splash_geometry.height()) // 2)
    splash.show()



if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    # 创建启动界面，并设置为全屏显示
    splash_pix = QPixmap(':/qfluentwidgets/images/logo.png')  # 替换为你的启动图片路径
    splash = QSplashScreen(splash_pix)
    center_splash(splash)  # 调用函数使启动界面居中
    app.processEvents()  # 处理当前在事件队列中的所有事件

    # FIXME： 修改了启动界面的显示时间
    QTimer.singleShot(100, splash.close)

    # modelLoader = Loader('logs4/best_epoch_weights.pth', 2)
    # modelLoader.load()

    Form = QtWidgets.QWidget()
    ui = UI_Form()
    ui.setupUi(Form)

    # 在启动界面后延迟显示主窗口，并设置为全屏
    QTimer.singleShot(100, lambda: Form.showMaximized())

    sys.exit(app.exec_())
